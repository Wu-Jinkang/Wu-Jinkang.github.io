<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020下半年的那些事</title>
      <link href="/2021/05/10/2020-xia-ban-nian-de-na-xie-shi/"/>
      <url>/2021/05/10/2020-xia-ban-nian-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="20岁挣钱挣到亏钱指南"><a href="#20岁挣钱挣到亏钱指南" class="headerlink" title="20岁挣钱挣到亏钱指南"></a>20岁挣钱挣到亏钱指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>21年初我本来想写一篇关于鞋圈的入门，但是过去了五个月后行情变了，散户越来越难拿到鞋，大部分都被大佬独占了因此这篇文章主要是想让外面的人别进来，而我自己也准备从这个泥沼中逃出来。</p><h2 id="数据-10-05-2021更新"><a href="#数据-10-05-2021更新" class="headerlink" title="数据(10/05/2021更新)"></a>数据(10/05/2021更新)</h2><p>工具的支出：<br>-在2020年7月22日加入了西班牙王牌DC监控群<em>HypeHunters</em>, 一共花费了319欧元的租金至今;<br>-在2020年10月29日购买了但是默默无闻的抽签机器人<em>Infinit</em>，一共花费了190欧元的租金至今;<br>-在今年二月购买了nike抽签机器人<em>uSNKRS</em>，一共花费了140,87欧元，6个月使用权</p><p>消耗品的支出：</p><ul><li>在<em>Ignify</em>家的代理一共消费了117,6欧元</li><li>在<em>Resigame</em>家的代理一共消费了186,92欧元</li><li>在<em>Leaf</em>家的代理一共消费了96,43欧元</li><li>在<em>NameCheap</em>, <em>阿里云</em>，<em>Zoho</em>，<em>protonmail</em>消费了约30欧元制作Catchall邮箱，期间交了点学费</li><li>在<em>Google Cloud</em>，<em>aws</em>租服务器消费了137,91欧元</li></ul><p>一共约<strong>一千两百十九欧元</strong>，差不多可以买一台MacBook了。<br>以上的消费基本上都是头脑发热花掉的，在消费途中并没有思考如何节省自己的成本。<br>接下来看看收入：</p><ul><li><em>Stockx</em>上卖出13双鞋子 -&gt; 收入2978欧元，成本2285欧元，利润693欧元</li><li><em>Vinted</em>上卖出13双鞋子 -&gt; 收入1903欧元，成本1410欧元，利润493欧元</li><li>家里囤着13双鞋子 成本1750欧元</li></ul><p>利润一共<strong>一千一百八十六欧元</strong>，亏损<strong>33欧元</strong>。</p><h2 id="一些经验与忠告"><a href="#一些经验与忠告" class="headerlink" title="一些经验与忠告"></a>一些经验与忠告</h2><p>去年三月份意大利爆发COVID-19，让我寄托在大学的环境来结交朋友的计划落空了。那段日子真的不知道做什么，就开始瞎玩，不过虽然在玩大学考试成绩一点都没落下，人也在居家健身和自我提升，阅读书籍等。下半年的时候开始出现了转折，年纪大了父母当然也开始想着孩子应该赚钱给家里分担支出了。自那时开始我就只有两条路，一条是上完课后马上去帮忙做手工，还有一条是自己找法子赚钱。我摊牌了，我不喜欢那份工作，原因很简单就是懒，当时我就在想世界上懒的人又不是只有我一个，为什么别人都能照样过日子呢？懒惰使得科技进步，所以我迈出了第一步。</p><p>加入监控组前有过很多想象，觉得自己已经要踏上人生巅峰了，心里的算盘一直是花一百块赚两百块钱的暴富商机，然后现实啪啪打脸，组里的Success频道叫个不停但是在组的群聊里发了一句Hello，没什么人回复，心想大概其他人都在忙着赚钱吧。呆了一个月后发现菜鸡在哪里都活不下去，热门发售监控组一提醒点击慢了就没货了，哪怕是准时点进网页也经常被机器人扫货一空，也就在那时埋下了想要拥有一个机器人的种子。<em>Infinit</em>是我在机器人市场筛选出来的成果，然而拥有后发现原来玩机器人是要花钱的，并且贵的不只是机器人本身还有他的消耗品。当时抽签机器人还没有现在这么火爆，<em>Infinit</em>的用户砸钱多的人（大概一两千欧）可以基本保证每一次发售都能中一双鞋子（现在估计得再加三四千欧）。所以很显然大部分拥有机器人的人并不是在赚钱而是在还债（或许现实中开店也一样？我这种死宅并不了解）。</p><p>说到这里不得不提一下YouTube那些机器人博主，你要是看了他们的购买视频后就觉得自己也能做到的话那只能被人割韭菜了。我发现鞋子机器人的市场的泡沫远大于潮鞋市场，潮鞋说到底是给人穿的，就算很多年轻人被割韭菜那起码还可以拍照发朋友圈。相反机器人市场就是专门割想要靠卖鞋赚钱的韭菜，想要买到鞋子吗，买我家的机器人啊(发出商人的奸笑）。基本上每个月都会冒出十几家新的机器人，logo一个比一个炫酷，功能一个个吹的特别强，就是为了吸引韭菜的注意力，本质上就是差不多的代码ctrl+c,ctrl+v然后换个UI。为什么我一个学计算机的入坑呢，可能就是机器人市场的魅力吧，人傻钱多。我曾经计算过前段时间一个只有简单几个功能的插件机器人的开发者月收入，那是一个很普通的插件售价50欧元，月租金15欧元，Twitter基本上看不到有人发success，就是这样一个插件他拥有两千多的用户，每人15欧元一个月，那么就是月入三万欧元。当然能够发展到这个地步也是相当了不起了，负责营销的人应该用了不少心思。很多机器人都会在上市后的几个月消失的无影无踪，因为大多数的机器人开发者本身并没有能力去研究和破解网站的机制，他们大部分是从其他人手中购买的核心代码然后换壳也因此他们的目标并不是持续的发展而是赚那笔入群费。逛了这么久bot市场了解到很多开发者都是华人，印度人，果然还是Asian最懂的哪里的钱好赚（没有歧视，这是在自嘲）。</p><p>说完了抢鞋的部分那说说卖鞋的部分，鞋的价格基本上就看StockX，唯一信仰。但是了解价格是一回事，卖就是另一回事了。卖鞋基本上我总结下来有几种渠道：</p><ol><li>本地Facebook社群，我没有使用过因为我不太信任这个没有人监管的平台</li><li>StockX, 我一般叫他绿叉，买卖明码标价，只需要用UPS寄到他们的仓库缺点是手续费昂贵</li><li>Vinted，法国最热门的二手交易市场，目前是我最喜欢的平台。优点是无手续费，缺点是经常有同行来开低价捡漏骚扰以及很多人喜欢放鸽子</li><li>国人，这条渠道我没有试过，但是这批人在我看来比市中心换欧洗钱的人高明多了，同样是洗钱，你拿钱换钱，别人把钱换成普普通通的鞋子然后几百斤几百斤运国内翻倍卖，这条路最近应该有被抵制事件有点影响到，优点:收大批，缺点:只给现金。</li><li>自己开店，部分大佬有自己在Instagram上开店以及通过TikTok宣传，具体效果怎样不清楚，优点:拥有属于自己的客户群体，缺点:投入精力巨大，且不能保证交易的可靠性。</li></ol><p>所以其实卖鞋比买鞋还难，花了大价钱抢到鞋然后发现卖不出去，简直就是黄牛噩梦（哭啊）。</p><p>到这里我相信你已经不会入坑了，在我走上这条路后我的确损失了金钱，时间但是具体值不值得我认为还是值得的。<br>对一个从来没研究过如何赚钱的人来说，这条路还是开阔了下眼界的。唯一感到可惜的是抢鞋他占用的时间比我想象中大太多了导致我现在应该得了我自称为做抢鞋以外事情无法集中注意力的心理疾病，最严重的时候手机只要通知一响就必须得去看通知，甚至出现过幻听。学习上也在开倒车，基本上很少上课大部分时间都在补课，这也导致一些知识被遗漏掉了，我也时刻在想一年两千七的学费如果靠抢鞋那得抢几年才能挣回来，不过呢目前我心里已经打算好了，抢鞋看运气以后不会再花大笔的精力到这个割韭菜的游戏中去了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我现在充分意识到自己原来不只是懒还有傻，马上要过二十一岁生日了我庆幸我知道的早。作为一个又懒又傻的笨蛋我的目标一直都是制作一个能自动帮我赚钱的机器人，还好我已经在这条路上了，我的自动赚钱机器人帮我在三月份换了台最新的水果牌手机希望这个五月能加把劲，因为我想换电脑了。啥，你问我怎么做的，你也是学电脑的只要抓住商机你也可以做啊（吃瓜）。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机结构课期末项目合作体会</title>
      <link href="/2020/09/04/ji-suan-ji-jie-gou-ke-qi-mo-xiang-mu-he-zuo-ti-hui/"/>
      <url>/2020/09/04/ji-suan-ji-jie-gou-ke-qi-mo-xiang-mu-he-zuo-ti-hui/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章本身也是一种尝试，主要想记录一些这次合作的收获，混合了一些个人的东西，表达了一些自己的感受，顺带的提了一些编程相关，写项目相关的内容。</p><h1 id="寻找合作伙伴"><a href="#寻找合作伙伴" class="headerlink" title="寻找合作伙伴"></a>寻找合作伙伴</h1><p>寻找人合作这件事从开学第一天起我就开始做了，当时没有一个准确的目标，只知道写作文没及格过的自己是不可能独自写出一个达标的项目报告。<br>最早的想法是找我的高中同学Albi合作，但是由于他在印象中做项目一直都是甩手给他人的风格因此打消了想法。第二个想合作的人是刚认识的同桌，Jonathan同学， 是一个数学特别好，也愿意和我讨论一些课题的人，高分毕业于设计技校，总之非常不错的南美小伙。后来又认识了三个中国人，本想说总算有人带了，可惜没有来自电脑技校的，所以改变计划，带他们，合作人选也变成了他们之中。直到圣诞节前几天，我遇见了一个女生，非常认真的在本子上记录着教授讲的内容。当时我坐到了她后面试着呼唤了她，非常紧张，紧张的感觉高考八个老师坐在面前都不算什么了，谢天谢地那个女生答应了我的邀请，我也要到了联系方式，和她的交谈中我也锁定了合作对象的人选。<br>废话到此结束，接下来记录这次宝贵的制作过程，被Zoppi称为班级第一的项目是如何写出来的。</p><h1 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h1><p>准备过程一波三折，汇编编程对我来说相当陌生所以花了比较多的时间去学理论，学习小组成立后我与Cinzia同学的作息时间又冲突了，不过疫情原因也无事可做所以大家都放下心来想把项目早点写完。当助教把项目内容发出来的时候，小组已经待命了。第一步当然就是读项目内容，这个项目主要与密码学相关，我们需要写五个加密解密算法：凯撒密码，分组密码，字母坐标密码，字典和倒置。其中个别算法在四月底被修改过需求，不过还好只是简化了项目难度。第一次和Cinzia同学聊这部分的时候稍稍感到压力，毕竟高中接触的同学大家都是电脑系，对这方面的东西多少都知道一二，和Cinzia同学聊这方面的东西就一直想着不能说错话，毕竟不能带坏别人，也体会到了高中电脑老师的辛苦。项目开始最早我们先用相对熟悉的JAVA来写这几个算法，高级语言简单方便非常适合测试算法，过程中遇到过几个问题所以提一下怎么写好算法。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>算法最重要的还是简单易懂，可广泛的重复利用。这次项目的算法都已经在资料中写清楚了要做什么，比如凯撒就是达到字母表循环，所以都是一些简单的数学运算。需要说几点：</p><ol><li>写算法这个过程小组内需要互相交换意见，把自己所想的表达清楚，如果需要可以画图，提出可能性然后大家一起慢慢优化。</li><li>算法能少写循环就少写，因为太多的循环会导致效率很低，有些循环或许可以通过数学来避免。</li><li>从大局上思考怎样重复利用已有的算法，又或者怎么创造出通用的算法。</li><li>想到了算法后把想法记录在记事本上，这样后面实现的时候可以做参照。<br>能做到以上几点基本上写出来的算法不会太糟糕，优化也不是一步到位的要仔细想。核心就是<strong>易懂</strong>，<strong>便写</strong>，<strong>效率高</strong>，达到这几点就完成了单个算法所需要的。做项目和做算法题最大的区别是需要<strong>顾虑全局</strong>，算法与算法之间的互动都要在考虑范围内。想好了算法，下一步就是数据结构，是的，哪怕是在汇编也需要考虑，RISC-V的数据只按照占用的空间做为单位所以分为Byte,word,double word这三种，数组的实现只需要一个地址。这些特性导致实现算法的过程和高级语言会有很大的出入，需要非常注意。最后就是运算部分会相当繁琐，做一小步需要写很长的代码，所以要<strong>记得随时写注释！</strong></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码部分主要就是突出一个遵守规范，从命名变量，注释格式，到各个寄存器的使用逻辑，<em>Stack</em>的运作都有非常严格的规定。总之需要熟练掌握之前理论部分的内容。我们的项目中，这部分基本有我负责，就像前言写的，这是我最擅长的部分。在写的过程中，Cinzia同学在屏幕的另一端监督，她做得非常好的一点在于她并不是单纯的看我写，而是自己有认真的去读和理解，偶尔的问题也让我们更好的理解项目的要求。讲到写代码就避免不了BUG和DEBUG，汇编语言在DEBUG方面相当的不友好，由于处理器使用的五步流水线导致断点打在的地方和实际运行的不符，程序也经常会因为一些哭笑不得的原因进入死循环，比如写错一个数字导致的读取内容不符。总之代码主要的任务是让机器听我们的指令，另一方面我们又要让其他人读的懂，所以有的时候简洁的注释还是全面的注释，仁者见仁智者见智。<br>算法之前讲过了，这里提下Main, 主程序，在项目中主要负责处理连续加密以及连续解密。项目要求虽然没有写明，但是一个好的程序应该得有提醒用户出错的功能，所以需要处理程序异常。RISC-V的具体处理方式不包括在我们的课程内，所以我们采用的是比较简单的方法，创造一个Error的标签来显示出错信息。处理异常首先需要考虑项目的隐式要求，比如输入的限制，输出的限制，这些都是要通过代码解决的问题。再然后还有我们代码不支持的情况，这些情况也必须写清楚。写完代码之后就到了最重要的一步, 写报告。</p><h1 id="项目报告"><a href="#项目报告" class="headerlink" title="项目报告"></a>项目报告</h1><p>项目报告主要由Cinzia同学负责，我大部分时间都在旁观，这里主要写一些从她那里学到的东西吧。写报告的第一步是选择一个好用的文本编辑软件（我们使用的是word）。第二步，报告的格式是有一套标准的，在Cinzia同学提到后我愣了一愣，不过最后由于页面要放代码的原因最后我们放弃了报告规范，采用了一个我们自己决定的规范。确定了格式后需要准备一个大纲，这部分Cinzia同学分得很细致，一个项目被她分成了以下几个部分：</p><ul><li>封面，贴上了大学的logo和特别大得标题，看起来非常的正式</li><li>目录，附上了重要内容的页数</li><li>项目目的，简单的复述了密码学的作用</li><li>实现，提到了我们借助了哪些工具，和如何实践项目目的中提到的密码算法</li><li>内容，最重要的部分，我们为项目中最基本的进程都详细的表述了它们的逻辑，主要被我们划分成了几点:<ul><li>伪代码，提供算法思想</li><li>伪代码简写，说明一些伪代码表达不清楚的地方</li><li>Assembly，汇编代码，附上代码的注释</li><li>汇编代码简写，说明一些在汇编中与伪代码不同的地方，核心部分在于<strong>寄存器</strong>，<strong>stack</strong>，<strong>内存</strong>的使用。</li></ul></li><li>代码测试，附上了几张图片，被Cinzia同学拆分成了一步一步（太用心了）用来显示程序每一步的运行情况与出错的情况</li><li>参考资料出处，这也是我想不到的东西之一，不过正因为有这些细节才能够让项目整体看起来特别正式，规范。</li><li>完全代码，按照项目需求添加的，这里必须提到由于word一行可写的字符太少，<strong>强烈建议写代码的时候注释不要隔太远也不要写太长</strong>，这里我花了一个小时去整理注释（人晕了）。<br>上面写的已经非常全面的讲述了我们报告的构成，说一下我对内容部分的感受，写比较官方的东西可以去网上寻找资料然后删减整理，写比较具体局限的东西需要组织好用词，减少重复词汇。Cinzia同学向我展示了她写作的实力：一个段落要如何开头；怎么讲清楚一个内容；该使用什么动词；怎么使用连接词；这部分让我受益良多，心里只想说Cope nb。</li></ul><h1 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h1><p>项目要求提供一个演示视频，我本来的想法是随便录一个应付完事，但是考虑到Cinzia同学那么用心写的项目，不舍得让我们费劲心血的项目最后被一个很草率的演示视频破坏，为此我们讨论了该说的内容，两个人都录了视频。最后想说我什么都没帮上Cinzia同学，这部分就让我来。在N次失败（忘词，口误）后，总算录出来了一个看起来还可以的视频，也从这意识到自己因为疫情已经太久太久没用意大利语交流了。</p><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><p>项目完结的时候距离考试也不久了。考试那天，我与Cinzia同学提前沟通好了项目部分可能出现的问题以及怎么回答，结果考试过程中只问了一个很广泛的问题，两人眼蹬眼完全不知道谁接话（Zoppi你就不能指人嘛，晕）最后我接起了话然后很尴尬的卡住了，还好Cinzia同学反应迅速救回了场。最后考试很顺利，希望Cinzia同学不要生我的气，感觉我抢走了太多本来属于你的高光时刻，非常抱歉！为了感谢你我准备了这篇文章，希望能记录下这次珍贵的经历。</p><h1 id="感谢信"><a href="#感谢信" class="headerlink" title="感谢信"></a>感谢信</h1><p><em>致Cinzia同学,</em></p><p><em>谢谢你，Cinzia！</em></p><p><em>没有你就不会有这个项目，非常感谢你在这次合作中的配合以及付出，你教了我许多许多写作方面的知识，你也因为这次项目腾出了非常多你宝贵的时间，让你好多天睡眠不足真是抱歉。</em></p><p><em>与你的合作非常愉快，你对事物的严谨一直在激励着我，对我来说就像打开了新世界的大门，希望这次合作对你来说也是值得的，也希望你不要因为成绩而烦恼，我们的项目是最棒的，在你我心中永远都是，让自己满意就足够了。</em></p><p><em>这次合作到此就算结束了，期待下次和你的合作，也期待新的作品的诞生。</em></p><p><em>wjk</em></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 考试笔记 </tag>
            
            <tag> Assembly </tag>
            
            <tag> RISC-V </tag>
            
            <tag> Teamwork </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python与Requests库登录Moodle</title>
      <link href="/2020/09/01/shi-yong-python-request-ku-deng-lu-moodle/"/>
      <url>/2020/09/01/shi-yong-python-request-ku-deng-lu-moodle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python是一种近几年很流行的编程语言，它的特色是类似伪代码的语法，非常丰富的支持库又与最近流行的人工智能，大数据技术息息相关，掌握Python已经成为了非常吃香的技能。在众多的用途中Python也常常被用来写<strong>爬虫</strong>(Crawler), 本篇主要讲的是如何使用Python的<a href="https://requests.readthedocs.io/en/master/" target="_blank" rel="noopener">request</a>库与<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re</a>库简单的模拟登录我们大学的教学资源平台<a href="https://e-l.unifi.it/" target="_blank" rel="noopener">Moodle</a>。为什么会想到做这个爬虫呢？因为某一天在下载学习资料时实在是懒得点击一个一个下载链接，所以就想我能不能写一个爬虫去帮我下载所有资料到本地呢？所以懒惰就是动力（狗头）。</p><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><p>Requests库提供了非常方便的方式去创建HTTP请求，它主要负责模拟浏览器请求，其中需要：</p><ul><li>Session类来创建对象用来保存每次请求的一些参数从而减少我们的工作量，同时它还提供下面的方法；</li><li>post方法用来上传我们的登录请求；</li><li>get方法用来获取页面信息；</li><li>raise_for_status方法用来检测请求是否超时。</li></ul><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>Re库提供的是解析信息的作用，当我们获取到页面信息后我们将需要使用它来锁定有用的数据。主要使用到是findall()这个static方法，它会根据我们提供的筛选方法来锁定数据然后将结果转换成list。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>万事开头难，编程也是如此。写爬虫最重要的是分析需要爬的网站，比如熟悉正常的浏览器操作以及网站所需要的请求信息。我们的目的是达到模拟登录所以我们要做的就是<strong>登录</strong>。怎么登录？进入登录页面然后输入账号密码点击登录。我们要模拟的也就是这个过程，所以第一步就是进入网站。</p><p>我们之前提到要使用Session类，具体使用方法如下：</p><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span>创建对象</code></pre><p>但是这样子还远远不够，因为我们要做的是模拟登录，所以我们要模拟平时浏览器进入网站的情景，通过浏览器的开发者工具我们可以了解到一个普普通通的请求携带着以下信息（HTTP请求的头信息）所以我们把他存到一个词典内，再把这些信息与我们的对象绑定：</p><pre class=" language-python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, br'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://e-l.unifi.it/login/index.php'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>headers<span class="token punctuation">)</span></code></pre><p>然后我们把安全验证给关闭再设定一个请求超时限制（理论上安全验证也非常重要，但是具体怎么处理我还不会）。</p><pre class=" language-python"><code class="language-python">session<span class="token punctuation">.</span>verify <span class="token operator">=</span> <span class="token boolean">False</span>session<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3</span></code></pre><p>准备工作到此结束。接下来就是重点，获取登录页面。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><pre class=" language-python"><code class="language-python">loginpage <span class="token operator">=</span> <span class="token string">'https://e-l.unifi.it/login/index.php'</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>loginpage<span class="token punctuation">)</span>response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>content</code></pre><p>首先使用get方法发送并获取页面请求，然后把获得的回复信息存在response，接着通过raise_for_status方法检测请求结果，最后把response的内容部分，也就是页面的信息存在html变量中。我们得到的登陆界面和浏览器所呈现的是有区别的，浏览器它的作用是把Html，CSS和JavaScript渲染成画面，但是对于我们爬虫来说一切的信息已经在这串Html里了。进入了界面后按照我们之前的说法应该输入账号密码，但是与浏览器操作不同，我们不在意输入的过程，我们在意的是浏览器如何把我们的账号密码发送到服务端进行登录的。而这也真是http协议中POST扮演的角色，通过开发者工具中的网络监控我们可以看到学校的帐号会发送一个POST请求到服务器，这个请求包含以下信息：</p><pre class=" language-json"><code class="language-json">anchor<span class="token operator">:</span> logintoken<span class="token operator">:</span> AZ1f4bY9loLxPpJ6YZNjriCej7YaSuTgusername<span class="token operator">:</span> <span class="token number">7029446</span>password<span class="token operator">:</span> mypassword</code></pre><p>我们想要登录的话得模拟这份内容然后通过post方法做同样的请求，但是目前我们只知道账号和密码，这个logintoken还不清楚。这时候我们得仔细研究网站的登录机制，通过观察网站的HTML，我发现这个所谓的logintoken其实就藏在我们的登录页面之中，如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logintoken<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VzBdKwpCUvLlzN9tDoZoPdLFebSTtgIv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>所以我们要做的就是通过re的筛选功能获取这个input的value。</p><pre class=" language-python"><code class="language-python">texts <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'logintoken" value="(.*?)"'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>login_token <span class="token operator">=</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>最后就是构造POST请求</p><pre class=" language-python"><code class="language-python">login_data <span class="token operator">=</span> <span class="token string">"anchor=&amp;logintoken="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>login_token<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;username=7029446&amp;password=mypassword"</span>login_response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>loginpage<span class="token punctuation">,</span> data <span class="token operator">=</span> login_data<span class="token punctuation">)</span>login_response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="一些可能性"><a href="#一些可能性" class="headerlink" title="一些可能性"></a>一些可能性</h2><p>我们首先组装出POST所需要的内容也就是logintoken,username和password，然后通过session的post方法做POST请求告诉服务器我们要登录，最后通过raise_for_status来检查请求结果是否顺利。到这里我们已经完成了模拟登录，接下来通过这个session做的请求将可以接触到所有只提供给学生的材料，以这里为起点可以写出一些爬学习资料的爬虫或者帮学生做一些便利的操作，甚至可以写一个app自己创建一个相似的平台，当然这些操作都违法了学校网站的条例。在此我不提倡以上举出的这些做法，本篇只是写出我学习爬虫的心得并不想做任何违反校规或者相关法律的行为。</p>]]></content>
      
      
      <categories>
          
          <category> Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crawler </tag>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World(测试HEXO添加代码)</title>
      <link href="/2020/06/16/hello-world-ce-shi-hexo-tian-jia-dai-ma/"/>
      <url>/2020/06/16/hello-world-ce-shi-hexo-tian-jia-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>HEXO最近几天使用下来感觉还是非常方便的， 唯一需要锻炼的就是Markdown格式的写法， 特别是考虑到之后需要讲解程序之类的情况，会用Markdown添加代码显得特别重要。在Markdown中附加代码需要用到 ``` [语言] [标题] [url] [网址名称] ``` 的格式来表达，因为我通过博客主题的作者推荐下载了<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prim-plugin</a>,一个代码高亮插件所以看起来会和HEXO原生的代码高亮有些许区别。下面是我用不同语言写的几个Hello World:</p><p>Java版本：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>C++版本：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JavaScript版本：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>HTML版本：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Python3版本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个暗色的主题看起来很酷，感觉每种语言都还挺不错的，特别是JAVA版本五颜六色的很直观，代码用Markdown写起来也很简单，唯一可惜的就是高亮插件不一定支持汇编语言。毕竟汇编语言五花八门，作者也不可能把所有汇编语言都记录进去。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程课考试心得</title>
      <link href="/2020/06/15/bian-cheng-ke-kao-shi-xin-de/"/>
      <url>/2020/06/15/bian-cheng-ke-kao-shi-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="献给还没过编程的你们"><a href="#献给还没过编程的你们" class="headerlink" title="献给还没过编程的你们"></a>献给还没过编程的你们</h1><h2 id="考前准备"><a href="#考前准备" class="headerlink" title="考前准备"></a>考前准备</h2><ul><li>看一遍Basile教授的视频</li><li>刷一遍Moodle上去年Bettini教授给的考试题目</li><li>考试前好好睡一觉</li><li>祈祷考试题目简单一些</li><li>测试手机对长时间使用MEET的反应</li><li>调整好书桌和手机的位置，让手机能够拍到<strong>人脸，鼠标，键盘，显示屏</strong></li><li>注意Eclipse使用的Java版本必须是 <strong>Java 8</strong></li><li>考前关掉一切其他应用，<strong>手机静音</strong></li><li>洗头</li></ul><h2 id="笔试注意事项"><a href="#笔试注意事项" class="headerlink" title="笔试注意事项"></a>笔试注意事项</h2><ul><li>不要一开始就想着写代码，先认真把题目和注意事项都读一遍，然后大概了解题目的难点是什么</li><li>变量，方法，类的名字要和题目上规定的<strong>一模一样</strong>， <em>toString()</em> 方法要注意<strong>空格的数量和所在的位置</strong>。</li><li>不要钻牛角尖，一种方法不行马上换另一种试试, 哪怕这个方法很丑</li><li><strong>不要写重复</strong>的代码，通过测试后，自己重新看一遍有没有哪些地方可以写一个辅助的方法</li><li>考试的时候如果忘记各别方法的名称或者参数可以把对象写出来后使用 <em>dot notation</em> 和Eclipse自带的JavaDoc了解具体信息。</li><li>Java OOP部分的题目相对算法部分来说更简单，如果在算法卡住的话可以考虑先写OOP部分</li><li><em>Stream</em> 使用的时候要注意是用 <em>Parallel Stream</em> 还是普通 <em>Stream</em> ， 如果是前者可能在各别方法上要使用支持多进程的版本</li><li>当看到&lt;…&gt;的时候，判断使用 <code>? super T</code> 还是 <code>? extend T</code> 最快的方法是: 从 <em>List</em> 里读东西用extend，存东西到 <em>List</em> 用super</li><li>自动生成在大多数时候都很好用，除了 <em>toString()</em></li><li>其他的之后再补充</li></ul><h2 id="5月21号考试示例"><a href="#5月21号考试示例" class="headerlink" title="5月21号考试示例"></a>5月21号考试示例</h2><p><a href="https://e-l.unifi.it/mod/resource/view.php?id=409320" target="_blank" rel="noopener">题目</a><a href="https://e-l.unifi.it/mod/resource/view.php?id=409292" target="_blank" rel="noopener">答案</a> (需要Moodle账号)<br>我第一题的答案和老师的第一题第二个答案差不多，第二个答案类似但是明显老师的更加简洁。这两个答案明显比我的更好， 我就不放我的答案了。</p><h2 id="口试注意事项"><a href="#口试注意事项" class="headerlink" title="口试注意事项"></a>口试注意事项</h2><ul><li>想要绕开老师的问题不太可能</li><li>也没有提示</li><li>Basile教授的问题主要在Java OOP方面</li><li>Basile教授在视频中提到的问题，<strong>大概率</strong>出现</li><li>做题时，可以先缓一缓，<strong>仔细看题目</strong>，说出你的想法</li><li>小技巧：如果你在讲的时候看Basile在做一些小动作，比如突然靠到椅背上，左右手动来动去，脸朝别的方向，那你大概率<strong>说错了</strong></li><li>Lollini教授的问题主要是 <em>Gocce di Java</em> 上的内容，可能会问类型转换，递归之类的问题</li><li>Lollini教授的脸没有对着你的主要原因是他有一个外置摄像头，所以他实际上是在看着你的，不要觉得他漫不经心</li></ul><h2 id="口试内容"><a href="#口试内容" class="headerlink" title="口试内容"></a>口试内容</h2><p>当天口试好像教授们只准备了两三种问题， Basile教授问我的是关于 <em>Overriding</em> 和  <em>Overloading</em> 的区别以及用法， 做了一个关于 <em>Employee</em> 和 <em>Manager</em> 的题目后，就结束了。<br>Lollini教授问的是关于 <em>类型转换</em> 方面的知识，重点想知道 <em>显示转换</em> 和<em>隐式转换<em>，</em>浮点数与整数转换</em> 会出现的各种情况</p>]]></content>
      
      
      <categories>
          
          <category> 考试笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2020/06/14/xin-de-kai-shi/"/>
      <url>/2020/06/14/xin-de-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要做博客"><a href="#为什么要做博客" class="headerlink" title="为什么要做博客"></a>为什么要做博客</h2><p>在高三的时候，我们的电脑课老师给我们布置了一个特殊的作业。<br>他要求我们制作一个博客然后让他打分，理由是</p><blockquote><p>你们以后是程序员，如果能有一个博客就更有机会找到工作</p></blockquote><p>虽然我和同学们当时也不在意工作，但是为了不拿个不及格，我们还是人人都做了一个，大部分的人都是使用WordPress, Wix这些平台做的。对了，我们还得在博客上发布一篇上节课学完Race Condition后写的文章，最后不出意料的，我们被狠狠得嘲讽了一顿。</p><blockquote><p>你看看你， 都21世纪了你的博客怎么连张图片都没有!</p></blockquote><blockquote><p>你也是， 这个背景是怎么回事? 你自己看不亮瞎眼嘛!</p></blockquote><blockquote><p>哇哦， 你这个博客名字后面加个数字是什么意思？ 难道还有人和你同名同姓?</p></blockquote><p>当然，我是不会告诉你我是怎么被数落的。</p><p>那节课算是让我对博客有了个大概的认知，简单来说就是</p><ul><li>博客名，域名用自己的姓名</li><li>添加一些图片，照片让页面更加丰富</li><li>添加邮箱，电话号码，一些社交平台链接，让其他人能找到你</li><li>写一个自我介绍</li><li>不要让页面过于花哨， 保证可读性</li><li>最好让代码完整且可复制</li></ul><p>自那节课之后，我就去逛了逛一些大神的博客，看的我是特别的兴奋，也埋下了想要写博客的种子。</p><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>上面提到我看了很多博主的网站，之后我就去看他们是怎么架构的。看到一些大神是自己从零做的博客，考虑到自己前后端的水平，只能默默打开b站找教程。这时我看到了一个点击率很高的视频，链接后面补。 跟着他的讲解也了解到没有必要从零开始搭建，刚好他提到了关于这方面的Framework， 其中Hexo听说很多中文文档，也很好用。我就选择了Hexo， 到目前看来还是很好用， 文档也确实挺多， 官网也支持中文。 </p><h2 id="以后的内容"><a href="#以后的内容" class="headerlink" title="以后的内容"></a>以后的内容</h2><p>下半年大二了， 我准备把我各门课的笔记整理一下发布到博客上， 同时还会有一些编程方面，博客方面的学习笔记。<br>我现在对于博客的理解是：写博客最重要的就是写，哪怕写的很差，哪怕博客很丑，哪怕没人看。 只要开始写，那就会慢慢好起来的!</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
