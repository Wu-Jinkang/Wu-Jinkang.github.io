<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Python Request库登录Moodle</title>
      <link href="/2020/06/19/shi-yong-python-request-ku-deng-lu-moodle/"/>
      <url>/2020/06/19/shi-yong-python-request-ku-deng-lu-moodle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python是一种近几年很流行的编程语言，它的特色是类似伪代码的语法，非常丰富的支持库又与最近流行的人工智能，大数据技术息息相关，掌握Python已经成为了非常吃香的技能。在众多的用途中Python也常常被用来写<strong>爬虫</strong>(Crawler), 本篇主要讲的是如何使用Python的<a href="https://requests.readthedocs.io/en/master/" target="_blank" rel="noopener">request</a>库与<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re</a>库简单的模拟登录我们大学的教学资源平台<a href="https://e-l.unifi.it/" target="_blank" rel="noopener">Moodle</a>。为什么会想到做这个爬虫呢？因为某一天在下载学习资料时实在是懒得点击一个一个下载链接，所以就想我能不能写一个爬虫去帮我下载所有资料到本地呢？所以懒惰就是动力（狗头）。</p><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><p>Requests库提供了非常方便的方式去创建HTTP请求，它主要负责模拟浏览器请求，其中需要：</p><ul><li>Session类来创建对象用来保存每次请求的一些参数从而减少我们的工作量，同时它还提供下面的方法；</li><li>post方法用来上传我们的登录请求；</li><li>get方法用来获取页面信息；</li><li>raise_for_status方法用来检测请求是否超时。</li></ul><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>Re库提供的是解析信息的作用，当我们获取到页面信息后我们将需要使用它来锁定有用的数据。主要使用到是findall()这个static方法，它会根据我们提供的筛选方法来锁定数据然后将结果转换成list。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>万事开头难，编程也是如此。写爬虫最重要的是分析需要爬的网站，比如熟悉正常的浏览器操作以及网站所需要的请求信息。我们的目的是达到模拟登录所以我们要做的就是<strong>登录</strong>。怎么登录？进入登录页面然后输入账号密码点击登录。我们要模拟的也就是这个过程，所以第一步就是进入网站。</p><p>我们之前提到要使用Session类，具体使用方法如下：</p><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span>创建对象</code></pre><p>但是这样子还远远不够，因为我们要做的是模拟登录，所以我们要模拟平时浏览器进入网站的情景，通过浏览器的开发者工具我们可以了解到一个普普通通的请求携带着以下信息（HTTP请求的头信息）所以我们把他存到一个词典内，再把这些信息与我们的对象绑定：</p><pre class=" language-python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, br'</span><span class="token punctuation">,</span>    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://e-l.unifi.it/login/index.php'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>headers<span class="token punctuation">)</span></code></pre><p>然后我们把安全验证给关闭再设定一个请求超时限制（理论上安全验证也非常重要，但是具体怎么处理我还不会）。</p><pre class=" language-python"><code class="language-python">session<span class="token punctuation">.</span>verify <span class="token operator">=</span> <span class="token boolean">False</span>session<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3</span></code></pre><p>准备工作到此结束。接下来就是重点，获取登录页面。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><pre class=" language-python"><code class="language-python">loginpage <span class="token operator">=</span> <span class="token string">'https://e-l.unifi.it/login/index.php'</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>loginpage<span class="token punctuation">)</span>response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>content</code></pre><p>首先使用get方法发送并获取页面请求，然后把获得的回复信息存在response，接着通过raise_for_status方法检测请求结果，最后把response的内容部分，也就是页面的信息存在html变量中。我们得到的登陆界面和浏览器所呈现的是有区别的，浏览器它的作用是把Html，CSS和JavaScript渲染成画面，但是对于我们爬虫来说一切的信息已经在这串Html里了。进入了界面后按照我们之前的说法应该输入账号密码，但是与浏览器操作不同，我们不在意输入的过程，我们在意的是浏览器如何把我们的账号密码发送到服务端进行登录的。而这也真是http协议中POST扮演的角色，通过开发者工具中的网络监控我们可以看到学校的帐号会发送一个POST请求到服务器，这个请求包含以下信息：</p><pre class=" language-html"><code class="language-html">anchor: logintoken: AZ1f4bY9loLxPpJ6YZNjriCej7YaSuTgusername: 7029446password: mypassword</code></pre><p>我们想要登录的话得模拟这份内容然后通过post方法做同样的请求，但是目前我们只知道账号和密码，这个logintoken还不清楚。这时候我们得仔细研究网站的登录机制，通过观察网站的HTML，我发现这个所谓的logintoken其实就藏在我们的登录页面之中，如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logintoken<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VzBdKwpCUvLlzN9tDoZoPdLFebSTtgIv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>所以我们要做的就是通过re的筛选功能获取这个input的value。</p><pre class=" language-python"><code class="language-python">texts <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'logintoken" value="(.*?)"'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>login_token <span class="token operator">=</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>最后就是构造POST请求</p><pre class=" language-python"><code class="language-python">login_data <span class="token operator">=</span> <span class="token string">"anchor=&amp;logintoken="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>login_token<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;username=7029446&amp;password=mypassword"</span>login_response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>loginpage<span class="token punctuation">,</span> data <span class="token operator">=</span> login_data<span class="token punctuation">)</span>login_response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="一些可能性"><a href="#一些可能性" class="headerlink" title="一些可能性"></a>一些可能性</h2><p>我们首先组装出POST所需要的内容也就是logintoken,username和password，然后通过session的post方法做POST请求告诉服务器我们要登录，最后通过raise_for_status来检查请求结果是否顺利。到这里我们已经完成了模拟登录，接下来通过这个session做的请求将可以接触到所有只提供给学生的材料，以这里为起点可以写出一些爬学习资料的爬虫或者帮学生做一些便利的操作，甚至可以写一个app自己创建一个相似的平台，当然这些操作都违法了学校网站的条例。在此我不提倡以上举出的这些做法，本篇只是写出我学习爬虫的心得并不想做任何违反校规或者相关法律的行为。</p>]]></content>
      
      
      <categories>
          
          <category> Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crawler </tag>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World(测试HEXO添加代码)</title>
      <link href="/2020/06/16/hello-world-ce-shi-hexo-tian-jia-dai-ma/"/>
      <url>/2020/06/16/hello-world-ce-shi-hexo-tian-jia-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>HEXO最近几天使用下来感觉还是非常方便的， 唯一需要锻炼的就是Markdown格式的写法， 特别是考虑到之后需要讲解程序之类的情况，会用Markdown添加代码显得特别重要。在Markdown中附加代码需要用到 ``` [语言] [标题] [url] [网址名称] ``` 的格式来表达，因为我通过博客主题的作者推荐下载了<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prim-plugin</a>,一个代码高亮插件所以看起来会和HEXO原生的代码高亮有些许区别。下面是我用不同语言写的几个Hello World:</p><p>Java版本：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>C++版本：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>JavaScript版本：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>HTML版本：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Python3版本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个暗色的主题看起来很酷，感觉每种语言都还挺不错的，特别是JAVA版本五颜六色的很直观，代码用Markdown写起来也很简单，唯一可惜的就是高亮插件不一定支持汇编语言。毕竟汇编语言五花八门，作者也不可能把所有汇编语言都记录进去。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程课考试心得</title>
      <link href="/2020/06/15/bian-cheng-ke-kao-shi-xin-de/"/>
      <url>/2020/06/15/bian-cheng-ke-kao-shi-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="献给还没过编程的你们"><a href="#献给还没过编程的你们" class="headerlink" title="献给还没过编程的你们"></a>献给还没过编程的你们</h1><h2 id="考前准备"><a href="#考前准备" class="headerlink" title="考前准备"></a>考前准备</h2><ul><li>看一遍Basile教授的视频</li><li>刷一遍Moodle上去年Bettini教授给的考试题目</li><li>考试前好好睡一觉</li><li>祈祷考试题目简单一些</li><li>测试手机对长时间使用MEET的反应</li><li>调整好书桌和手机的位置，让手机能够拍到<strong>人脸，鼠标，键盘，显示屏</strong></li><li>注意Eclipse使用的Java版本必须是 <strong>Java 8</strong></li><li>考前关掉一切其他应用，<strong>手机静音</strong></li><li>洗头</li></ul><h2 id="笔试注意事项"><a href="#笔试注意事项" class="headerlink" title="笔试注意事项"></a>笔试注意事项</h2><ul><li>不要一开始就想着写代码，先认真把题目和注意事项都读一遍，然后大概了解题目的难点是什么</li><li>变量，方法，类的名字要和题目上规定的<strong>一模一样</strong>， <em>toString()</em> 方法要注意<strong>空格的数量和所在的位置</strong>。</li><li>不要钻牛角尖，一种方法不行马上换另一种试试, 哪怕这个方法很丑</li><li><strong>不要写重复</strong>的代码，通过测试后，自己重新看一遍有没有哪些地方可以写一个辅助的方法</li><li>考试的时候如果忘记各别方法的名称或者参数可以把对象写出来后使用 <em>dot notation</em> 和Eclipse自带的JavaDoc了解具体信息。</li><li>Java OOP部分的题目相对算法部分来说更简单，如果在算法卡住的话可以考虑先写OOP部分</li><li><em>Stream</em> 使用的时候要注意是用 <em>Parallel Stream</em> 还是普通 <em>Stream</em> ， 如果是前者可能在各别方法上要使用支持多进程的版本</li><li>当看到&lt;…&gt;的时候，判断使用 <code>? super T</code> 还是 <code>? extend T</code> 最快的方法是: 从 <em>List</em> 里读东西用extend，存东西到 <em>List</em> 用super</li><li>自动生成在大多数时候都很好用，除了 <em>toString()</em></li><li>其他的之后再补充</li></ul><h2 id="5月21号考试示例"><a href="#5月21号考试示例" class="headerlink" title="5月21号考试示例"></a>5月21号考试示例</h2><p><a href="https://e-l.unifi.it/mod/resource/view.php?id=409320" target="_blank" rel="noopener">题目</a><a href="https://e-l.unifi.it/mod/resource/view.php?id=409292" target="_blank" rel="noopener">答案</a> (需要Moodle账号)<br>我第一题的答案和老师的第一题第二个答案差不多，第二个答案类似但是明显老师的更加简洁。这两个答案明显比我的更好， 我就不放我的答案了。</p><h2 id="口试注意事项"><a href="#口试注意事项" class="headerlink" title="口试注意事项"></a>口试注意事项</h2><ul><li>想要绕开老师的问题不太可能</li><li>也没有提示</li><li>Basile教授的问题主要在Java OOP方面</li><li>Basile教授在视频中提到的问题，<strong>大概率</strong>出现</li><li>做题时，可以先缓一缓，<strong>仔细看题目</strong>，说出你的想法</li><li>小技巧：如果你在讲的时候看Basile在做一些小动作，比如突然靠到椅背上，左右手动来动去，脸朝别的方向，那你大概率<strong>说错了</strong></li><li>Lollini教授的问题主要是 <em>Gocce di Java</em> 上的内容，可能会问类型转换，递归之类的问题</li><li>Lollini教授的脸没有对着你的主要原因是他有一个外置摄像头，所以他实际上是在看着你的，不要觉得他漫不经心</li></ul><h2 id="口试内容"><a href="#口试内容" class="headerlink" title="口试内容"></a>口试内容</h2><p>当天口试好像教授们只准备了两三种问题， Basile教授问我的是关于 <em>Overriding</em> 和  <em>Overloading</em> 的区别以及用法， 做了一个关于 <em>Employee</em> 和 <em>Manager</em> 的题目后，就结束了。<br>Lollini教授问的是关于 <em>类型转换</em> 方面的知识，重点想知道 <em>显示转换</em> 和<em>隐式转换<em>，</em>浮点数与整数转换</em> 会出现的各种情况</p>]]></content>
      
      
      <categories>
          
          <category> 考试笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2020/06/14/xin-de-kai-shi/"/>
      <url>/2020/06/14/xin-de-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要做博客"><a href="#为什么要做博客" class="headerlink" title="为什么要做博客"></a>为什么要做博客</h2><p>在高三的时候，我们的电脑课老师给我们布置了一个特殊的作业。<br>他要求我们制作一个博客然后让他打分，理由是</p><blockquote><p>你们以后是程序员，如果能有一个博客就更有机会找到工作</p></blockquote><p>虽然我和同学们当时也不在意工作，但是为了不拿个不及格，我们还是人人都做了一个，大部分的人都是使用WordPress, Wix这些平台做的。对了，我们还得在博客上发布一篇上节课学完Race Condition后写的文章，最后不出意料的，我们被狠狠得嘲讽了一顿。</p><blockquote><p>你看看你， 都21世纪了你的博客怎么连张图片都没有!</p></blockquote><blockquote><p>你也是， 这个背景是怎么回事? 你自己看不亮瞎眼嘛!</p></blockquote><blockquote><p>哇哦， 你这个博客名字后面加个数字是什么意思？ 难道还有人和你同名同姓?</p></blockquote><p>当然，我是不会告诉你我是怎么被数落的。</p><p>那节课算是让我对博客有了个大概的认知，简单来说就是</p><ul><li>博客名，域名用自己的姓名</li><li>添加一些图片，照片让页面更加丰富</li><li>添加邮箱，电话号码，一些社交平台链接，让其他人能找到你</li><li>写一个自我介绍</li><li>不要让页面过于花哨， 保证可读性</li><li>最好让代码完整且可复制</li></ul><p>自那节课之后，我就去逛了逛一些大神的博客，看的我是特别的兴奋，也埋下了想要写博客的种子。</p><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>上面提到我看了很多博主的网站，之后我就去看他们是怎么架构的。看到一些大神是自己从零做的博客，考虑到自己前后端的水平，只能默默打开b站找教程。这时我看到了一个点击率很高的视频，链接后面补。 跟着他的讲解也了解到没有必要从零开始搭建，刚好他提到了关于这方面的Framework， 其中Hexo听说很多中文文档，也很好用。我就选择了Hexo， 到目前看来还是很好用， 文档也确实挺多， 官网也支持中文。 </p><h2 id="以后的内容"><a href="#以后的内容" class="headerlink" title="以后的内容"></a>以后的内容</h2><p>下半年大二了， 我准备把我各门课的笔记整理一下发布到博客上， 同时还会有一些编程方面，博客方面的学习笔记。<br>我现在对于博客的理解是：写博客最重要的就是写，哪怕写的很差，哪怕博客很丑，哪怕没人看。 只要开始写，那就会慢慢好起来的!</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
